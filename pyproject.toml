[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "gui-agent-memory"
version = "0.1.0"
description = "Enhanced Memory Module (RAG-based) for GUI Agent"
authors = [
    {name = "GUI Agent Team"}
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "pydantic>=2.0.0",
    "chromadb>=0.4.0",
    "jieba>=0.42.1",
    "openai>=1.0.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.24.0",
    "typing-extensions>=4.5.0",
    "pysqlite3-binary>=0.5.4",
]

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.5.0",
    "types-requests>=2.31.0",
]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
# 代码质量检查规则
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
    "N",  # pep8-naming
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "E731",  # do not assign a lambda expression, use a def
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "N806",  # variable in function should be lowercase (for df, etc.)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["gui_agent_memory"]

[tool.mypy]
python_version = "3.11"
# 类型检查配置
warn_return_any = false
warn_unused_configs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true

# 渐进式类型检查
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

# 外部库处理
ignore_missing_imports = true
follow_imports = "silent"

# 测试文件特殊处理
[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = ["attr-defined"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short --strict-markers"
filterwarnings = [
    "ignore::DeprecationWarning:jieba.*",
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["gui_agent_memory"]
omit = [
    "tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

# 自定义脚本 - 用于网络问题时的本地检查
[project.scripts]
check = "scripts.check:main"

[tool.hatch.build.targets.wheel]
packages = ["gui_agent_memory"]
