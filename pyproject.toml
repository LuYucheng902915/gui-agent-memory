[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "gui-agent-memory"
version = "0.1.0"
description = "Enhanced Memory Module (RAG-based) for GUI Agent"
authors = [
    {name = "GUI Agent Team"}
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "pydantic~=2.11",
    "pydantic-settings~=2.10",
    "chromadb~=1.0",
    "jieba~=0.42",
    "openai~=1.98",
    "python-dotenv~=1.1",
    "requests~=2.32",
    "pysqlite3-binary~=0.5.4; sys_platform != 'win32'",
    "tenacity~=9.1",
]

[dependency-groups]
dev = [
    "pytest==8.4.1",
    "pytest-cov==6.2.1",
    "ruff==0.12.7",
    "mypy==1.17.1",
    "pre-commit==4.2.0",
    "types-requests==2.32.4.20250611",
]

[tool.ruff]
line-length = 88  # Black/Ruff 标准
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "S",   # bandit (security)
    "T20", # flake8-print
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "RUF001", # allow Chinese characters in strings
    "RUF003", # allow Chinese characters in comments
]

# 针对不同文件类型的特殊规则
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",   # assert allowed in tests
    "T201",   # print statements allowed in test debugging
    "ARG001", # unused function argument (common in fixtures)
]
"scripts/*" = [
    "T201",   # print statements allowed in scripts
]
"example.py" = [
    "T201",   # print statements allowed in examples
]

[tool.ruff.lint.isort]
known-first-party = ["gui_agent_memory"]

[tool.mypy]
python_version = "3.11"
ignore_missing_imports = true
check_untyped_defs = true
warn_unused_ignores = true
show_error_codes = true
disable_error_code = [
  # Test code passes invalid args on purpose to assert validation
  "call-arg",
  "list-item",
  # Allow shim patterns in config/log utils
  "assignment",
  "misc",
  # Tolerate API type mismatches from external libs where runtime is fine
  "arg-type",
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disable_error_code = ["attr-defined"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "-v",
    "--cov=gui_agent_memory",
    "--cov-report=term-missing",
    "--cov-fail-under=70",
]
filterwarnings = [
    "ignore::DeprecationWarning:jieba.*",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow-running tests",
]

[tool.coverage.run]
source = ["gui_agent_memory"]
omit = ["tests/*"]
data_file = "test_data/.coverage"

[tool.coverage.report]
show_missing = true

[tool.hatch.build.targets.wheel]
# Use src layout: point to the package path under src
packages = ["src/gui_agent_memory"]
# Ensure prompt templates are included in the wheel
include = [
  "src/gui_agent_memory/prompts/*.txt",
]

[tool.hatch.build.targets.sdist]
include = [
  "src/gui_agent_memory/**",
  "README.md",
  "LICENSE",
  "docs/**",
]
